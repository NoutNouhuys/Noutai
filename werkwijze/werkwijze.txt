# Instructies voor ontwikkelproces (volg deze nauwkeurig op)

## 0. Repository Summary Generatie

0.1 Controleer of `repository_summary.txt` bestaat in de hoofdmap van de repository:

0.1.1 Als het niet bestaat of als je expliciet gevraagd wordt om het bij te werken:
* 0.1.1.1 Maak een nieuwe branch aan met naam `feature/update-repository-summary`
* 0.1.1.2 Genereer een `repository_summary.txt` bestand met:
  - Overzicht van alle bestanden in de repository (gegroepeerd per directory)
  - Voor elk bestand: pad, grootte, korte beschrijving van de functionaliteit
  - Algemene projectstructuur en architectuur
  - Belangrijkste modules en hun onderlinge relaties
* 0.1.1.3 Commit het bestand met bericht "Add/Update repository summary"
* 0.1.1.4 Push de branch
* 0.1.1.5 Ga verder met stap 1

0.1.2 Als het wel bestaat:
* 0.1.2.1 Lees het `repository_summary.txt` bestand om de repository structuur en architectuur te begrijpen
* 0.1.2.2 Gebruik deze informatie als referentie tijdens het hele ontwikkelproces
* 0.1.2.3 Ga verder met stap 1

## 1. Controleer project\_info.txt

1.1 Als `project_info.txt` bestaat, lees altijd dit bestand eerst en ga naar Stap 2.

1.2 Als het niet bestaat:

1.2.1 Maak bestand `project_info.txt`, vul dit met informatie uit `start.txt`:

* 1.2.1.1 Projectomschrijving
* 1.2.1.2 Project doel, nut en functie (Lees de start.txt goed en zorg dat je het doel, de doelgroep, het nut en andere functionele punten of gevoel hier goed wordt sammengevat en niet wordt vergeten tijdens verder ontwikkelingen)
* 1.2.1.3 Architectuur/modulestructuur
* 1.2.1.4 Per module: status, bestandsnaam, pad, functionaliteit, afhankelijkheden

1.2.2 Maak bestand `project_stappen.txt`:

* 1.2.2.1 Korte omschrijving per stap, aanduiding must-have of nice-to-have
* 1.2.2.2 Doel: Geef niet alleen de technische richting maar leg ook in tekst toe wat wel willen bereiken in deze stap. Denk aan Doel, Doelgroep, Nut en Noodzaak.
* 1.2.2.3 Welke bestanden gemaakt/gewijzigd moeten worden, acties

1.2.3 Commit wijzigingen en push

## 2. Issues controleren

2.1 Zijn er openstaande issues?

* 2.1.1 Ja → Kies eerst bugs, dan andere issues, ga naar Stap 4
* 2.1.2 Nee → Ga naar Stap 3

## 3. Nieuw Issue aanmaken

3.1 Maak nieuw issue op basis van eerstvolgende 'must-have'-stap uit `project_stappen.txt` als er geen open issue aanwezig is, maar als geen 'must-have' stap open staat, stop je met de melding: 'Alle must-have taken zijn uitgevoerd'
* 3.1.1 Titel: omschrijving te implementeren functionaliteit
* 3.1.2 Analyseer relevante scripts om te bepalen hoe de functionaliteit het beste toegevoegd kan worden, doe dit grondig.
3.1.3 Beschrijving:
* 3.1.3.1 Duidelijke uitleg implementatie. Denk hier niet alleen technisch maar leg ook goed het doel, nut een noodzaak uit. Als er ook teksten, communicatie of andere niet teschnische elementen moeten worden opgeleverd, denk hier al over na en beschrijf hier zo goed mogelijk wat er moet gebeuren of werk de teksten alvast uit.
* 3.1.3.2 Welke modules/bestanden aangemaakt of gewijzigd
* 3.1.3.3 Welke functies toegevoegd/aangepast
* 3.1.3.4 Acceptatiecriteria (bijvoorbeeld: functie X levert resultaat Y bij input Z)
* 3.1.3.5 Maak een branche aan, geef expliciete branchnaam (`feature/...`)
3.1.4 Labels toevoegen: `"must-have"`, `"nice-to-have"` of `"bug"`
3.1.5 Als je klaar bent geef je geen samenvatting van je werkzaamheden maar vertelt alleen: 'Ik heb issue \[nummer] aangemaakt voor Repo \[owner]/\[repo]', je doet verder niks en je wacht verdere instructies

## 4. Issue uitvoeren

4.1 Kijk of er een branch genoemd wordt in het issue:
* 4.1.1 Zo ja, werk daarin verder
* 4.1.2 Zo nee, maak een branche aan en voer daar de werkzaamheden uit
4.2 Werk wijzigingen uit volgens beschrijving, analyseer relevante files of scripts om goed te berijpen hoe het issue ontwikkeld moet worden.
* 4.2.1 Als er nieuwe code wordt geschreven met meerdere Python functies, zorg ervoor dat elke functie in een eigen Python-bestand staat, tenzij functies direct van elkaar afhankelijk zijn. 
* 4.2.1 Groepeer deze .py bestanden in een logisch vernoemd mapje
4.3 Commit wijzigingen of file direct en met een duidelijk bericht
4.4 Werk tegelijk documenten bij (`project_info.txt`, `project_stappen.txt`,`repository_summary.txt`) en verwijder al uitgevoerde stappen uit 'project\_stappen.txt' door ze samen te vatten en daarmee het document compact te houden.

4.5 Maak Pull Request:
* 4.5.1 Titel: korte omschrijving
* 4.5.2 Beschrijving: refereer naar issue, beschrijf uitgevoerde wijzigingen, status tests en documentatie
4.6 Als je klaar bent geef je geen samenvatting van je werkzaamheden maar vertelt alleen: 'Ik heb Pull Request \[nummer] aangemaakt voor Repo \[owner]/\[repo]', je doet verder niks en je wacht verdere instructies

## 5. Mergen Pull Request

**Deze actie mag alleen worden uitgevoerd als de vraag 'Ik heb Pull Request \[nummer] aangemaakt voor Repo \[owner]/\[repo]' wordt gesteld**

5.1 Merge de Pull Request
5.2 Als je een Pull Request hebt gemerged: Sluit het bijbehorende issue
5.3 Als je klaar bent geef je geen samenvatting van je werkzaamheden maar vertelt alleen: 'Ik heb Pull Request \[nummer] verwerkt en bijbehorende branche \[branche] verwijderd voor Repo \[owner]/\[repo]', je doet verder niks en je wacht verdere instructies

## 6. Algemeen

6.1 Houd code overzichtelijk en documentatie synchroon
