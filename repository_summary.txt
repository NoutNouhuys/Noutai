# Repository Summary - AI Ontwikkelhulp (Noutai)

## Project Overview
AI Ontwikkelhulp is een gespecialiseerde tool die communicatie tussen gebruikers en AI-modellen (Claude) faciliteert voor code-ontwikkeling en repository-beheer. De applicatie biedt een gestructureerde werkwijze voor AI-gestuurde softwareontwikkeling met integratie van externe tools via het Model Context Protocol (MCP). **Nieuw: Multi-platform Git repository ondersteuning met zowel GitHub als Bitbucket integratie via MCP servers, inclusief platform selector UI, automatische platform detectie, en unified tool interface.**

## Repository Structure

### Root Directory Files (32 bestanden)
- `.env.example` (1,062 bytes) - Environment variabelen template **uitgebreid met Bitbucket MCP server configuratie**
- `.gitignore` (714 bytes) - Git ignore configuratie
- `CONTRIBUTING.md` (3,856 bytes) - Bijdrage richtlijnen
- `MERGED.md` (1,897 bytes) - Merge documentatie
- `README.md` (16,740 bytes) - Hoofddocumentatie met uitgebreide setup instructies
- `anthropic_api.py` (22,330 bytes) - High-level Anthropic API interface
- `anthropic_client.py` (6,951 bytes) - Pure API communicatie client
- `anthropic_config.py` (14,286 bytes) - Anthropic configuratie beheer **uitgebreid met Bitbucket MCP server configuratie**
- `app.py` (5,818 bytes) - Flask applicatie entry point
- `auth.py` (5,684 bytes) - Google OAuth authenticatie
- `config.py` (7,218 bytes) - Algemene applicatie configuratie
- `conversation_manager.py` (17,931 bytes) - Gesprek state management
- `database.py` (1,469 bytes) - Database configuratie en setup
- `mcp_connector.py` (5,150 bytes) - MCP protocol connector
- `mcp_integration.py` (21,397 bytes) - MCP server integratie **uitgebreid met multi-platform support**
- `project_info.txt` (27,764 bytes) - AI project informatie cache **bijgewerkt met Bitbucket integratie info**
- `project_stappen.txt` (26,119 bytes) - Ontwikkelstappen voor AI **bijgewerkt met voltooide Bitbucket integratie**
- `requirements.txt` (1,227 bytes) - Python dependencies
- `runtime.txt` (13 bytes) - Python runtime versie
- `start_template.txt` (784 bytes) - Start template
- `system_prompt.txt` (368 bytes) - AI system prompt
- `user.py` (3,497 bytes) - User model en sessie beheer

### Platform Management Module (3 bestanden) - **NIEUW**
- `platform_management/__init__.py` (322 bytes) - Platform management module initialisatie
- `platform_management/platform_manager.py` (17,256 bytes) - Centrale platform management en routing
- `platform_management/mcp_bitbucket_connector.py` (13,928 bytes) - Bitbucket-specifieke MCP integratie

### Analytics Module (4 bestanden)
- `analytics/__init__.py` (267 bytes) - Module initialisatie
- `analytics/analytics_service.py` (19,810 bytes) - Analytics service implementatie
- `analytics/cost_calculator.py` (8,378 bytes) - Kosten berekening functionaliteit
- `analytics/token_tracker.py` (13,116 bytes) - Token gebruik tracking

### Feature Directory (1 bestand)
- `feature/basic-structure` (0 bytes) - Basis structuur marker

### Database Migrations (6 bestanden)
- `migrations/README.md` (1,499 bytes) - Migratie documentatie
- `migrations/alembic.ini` (2,610 bytes) - Alembic configuratie
- `migrations/env.py` (2,272 bytes) - Migratie environment setup
- `migrations/rename_metadata_field.py` (808 bytes) - Metadata veld hernoemen migratie
- `migrations/script.py.mako` (494 bytes) - Migratie script template
- `migrations/versions/.gitkeep` (0 bytes) - Versie directory placeholder

### Data Models (3 bestanden)
- `models/__init__.py` (52 bytes) - Models module initialisatie
- `models/conversation.py` (3,130 bytes) - Conversation SQLAlchemy model
- `models/token_usage.py` (5,171 bytes) - Token usage tracking model

### Data Repositories (3 bestanden)
- `repositories/__init__.py` (58 bytes) - Repository module initialisatie
- `repositories/analytics_repository.py` (17,670 bytes) - Analytics data access layer
- `repositories/conversation_repository.py` (7,559 bytes) - Conversation CRUD operaties

### API Routes (3 bestanden)
- `routes/__init__.py` (92 bytes) - Routes module initialisatie
- `routes/analytics.py` (11,297 bytes) - Analytics API endpoints
- `routes/api.py` (43,286 bytes) - Hoofd REST API endpoints **uitgebreid met platform management endpoints**

### Static Assets
#### CSS Stylesheets (6 bestanden)
- `static/css/analytics.css` (7,829 bytes) - Analytics pagina styling
- `static/css/home.css` (5,383 bytes) - Home pagina styling
- `static/css/log-formatter.css` (12,105 bytes) - Log formattering styles
- `static/css/platform-selector.css` (6,398 bytes) - **NIEUW: Platform selector styling**
- `static/css/style.css` (23,006 bytes) - Hoofd styling en thema's

#### JavaScript Files (6 bestanden)
- `static/js/analytics.js` (12,710 bytes) - Analytics functionaliteit
- `static/js/home.js` (67,050 bytes) - Hoofd chat interface JavaScript
- `static/js/log-formatter.js` (13,249 bytes) - Log formattering module
- `static/js/main.js` (13,883 bytes) - Algemene JavaScript functionaliteit
- `static/js/platform-selector.js` (14,263 bytes) - **NIEUW: Platform selector JavaScript module**

#### Images (1 bestand)
- `static/img/google-logo.svg` (1,672 bytes) - Google login logo

### HTML Templates (7 bestanden)
- `templates/analytics.html` (4,024 bytes) - Analytics dashboard template
- `templates/base.html` (8,394 bytes) - Base template met navigatie **uitgebreid met platform selector includes**
- `templates/conversations.html` (33,516 bytes) - Gesprekken overzicht template
- `templates/home.html` (6,834 bytes) - Hoofd chat interface template
- `templates/login.html` (6,568 bytes) - Login pagina template
- `templates/components/chat_window.html` (3,271 bytes) - Chat window component

### Test Suite (14 bestanden)
- `tests/__init__.py` (295 bytes) - Test module initialisatie
- `tests/test_anthropic_api.py` (5,355 bytes) - Anthropic API tests
- `tests/test_anthropic_client.py` (16,189 bytes) - Anthropic client tests
- `tests/test_anthropic_config.py` (8,555 bytes) - Anthropic config tests
- `tests/test_anthropic_config_llm_settings.py` (10,580 bytes) - LLM settings tests
- `tests/test_api_conversation_persistence.py` (21,112 bytes) - API persistence tests
- `tests/test_api_llm_settings.py` (15,716 bytes) - API LLM settings tests
- `tests/test_auth.py` (2,843 bytes) - Authenticatie tests
- `tests/test_config.py` (6,765 bytes) - Configuratie tests
- `tests/test_conversation_manager.py` (17,821 bytes) - Conversation manager tests
- `tests/test_database.py` (10,639 bytes) - Database tests
- `tests/test_prompt_cache_control.py` (1,131 bytes) - Prompt cache tests
- `tests/test_tool_deduplication.py` (1,598 bytes) - Tool deduplicatie tests
- `tests/test_werkwijze_repo.py` (990 bytes) - Werkwijze repository tests

### Werkwijze Documentation (1 bestand)
- `werkwijze/werkwijze.txt` (4,185 bytes) - AI ontwikkeling instructies

## Architectuur en Module Relaties

### Core Application Layer
- **app.py**: Flask applicatie entry point, integreert alle modules
- **config.py**: Centrale configuratie management
- **database.py**: Database setup en connectie management

### Authentication & User Management
- **auth.py**: Google OAuth implementatie met Lynxx domain restrictie
- **user.py**: User model en sessie beheer

### AI Integration Layer
- **anthropic_api.py**: High-level interface voor Anthropic Claude API
- **anthropic_client.py**: Low-level API communicatie
- **anthropic_config.py**: Configuratie management voor AI modellen **uitgebreid met multi-platform MCP configuratie**
- **conversation_manager.py**: State management voor gesprekken

### MCP (Model Context Protocol) Integration
- **mcp_integration.py**: Hoofdmodule voor MCP server integratie **uitgebreid met multi-platform support**
- **mcp_connector.py**: Protocol connector voor externe tools

### Platform Management Layer (NIEUW)
- **platform_management/platform_manager.py**: Centrale platform management en routing tussen GitHub en Bitbucket
- **platform_management/mcp_bitbucket_connector.py**: Bitbucket-specifieke MCP server integratie
- **Unified tool interface**: Automatische routing naar juiste platform op basis van repository detectie
- **Tool argument conversie**: Conversie tussen GitHub (owner/repo) en Bitbucket (workspace/repo_slug) formaten

### Data Layer
- **models/**: SQLAlchemy database modellen
- **repositories/**: Data access layer met CRUD operaties
- **migrations/**: Database schema versioning

### API Layer
- **routes/api.py**: REST API endpoints voor chat functionaliteit **uitgebreid met platform management endpoints**
- **routes/analytics.py**: Analytics en reporting endpoints

### Analytics & Monitoring
- **analytics/**: Complete analytics module met cost tracking en token monitoring

### Frontend Layer
- **templates/**: Jinja2 HTML templates
- **static/**: CSS, JavaScript en assets
- **Workflow automation**: JavaScript-based workflow management
- **Platform selector UI**: Multi-platform Git repository selection interface

## Belangrijkste Functionaliteiten

### 1. AI-Gestuurde Repository Ontwikkeling
- Automatische GitHub en Bitbucket repository ontwikkeling via `ga` commando
- Issue-driven development workflow
- Automatische branch en pull request management
- **Multi-platform ondersteuning**: Werkt met zowel GitHub als Bitbucket repositories

### 2. Multi-Platform Git Repository Support (NIEUW)
- **Platform detectie**: Automatische detectie van GitHub vs Bitbucket repositories
- **Platform selector UI**: Handmatige platform selectie via dropdown interface
- **Unified tool interface**: Transparante tool execution ongeacht platform
- **Tool argument conversie**: Automatische conversie tussen platform-specifieke formaten
- **Connection status monitoring**: Real-time status van beide platform connecties
- **Error handling**: Platform-specifieke error handling en fallback mechanismen

### 3. Workflow Automation
- Pattern-based workflow automation
- Automatische chat window management
- Gestructureerde development cycles
- **Platform-agnostische workflows**: Workflows werken met beide platforms

### 4. MCP Tool Integration
- GitHub API integratie via MCP
- **Bitbucket API integratie via MCP** (NIEUW)
- External tool support
- Real-time tool execution feedback
- **Platform-aware tool routing**: Automatische routing naar juiste MCP server

### 5. Analytics & Monitoring
- Token usage tracking
- Cost calculation
- Performance analytics
- Usage reporting

### 6. User Interface
- Split-view chat interface
- Log formatting en syntax highlighting
- Dark/light theme support
- Real-time updates
- **Platform selector interface**: Multi-platform Git repository selection

### 7. Authentication & Security
- Google OAuth met domain restrictie
- Session management
- Secure API key handling

## Development Status
Het project is actief in ontwikkeling met een uitgebreide test suite en gestructureerde development workflow. De applicatie is productie-klaar met Docker support en deployment configuraties. **Nieuw toegevoegd: Multi-platform Git repository ondersteuning met Bitbucket MCP integratie voor verhoogde flexibiliteit en toegankelijkheid.**

## Key Dependencies
- Flask (web framework)
- SQLAlchemy (ORM)
- Anthropic SDK (AI integration)
- Google OAuth libraries
- MCP protocol libraries
- Alembic (database migrations)
- **Bootstrap 5** (UI framework voor platform selector)
- **Font Awesome** (icons voor platform indicators)

## Multi-Platform Configuration
### Environment Variables
```env
# GitHub MCP Server
MCP_SERVER_SCRIPT=/path/to/github-mcp-server/app.py
MCP_SERVER_VENV_PATH=/path/to/github-mcp-server/venv

# Bitbucket MCP Server
BITBUCKET_MCP_SERVER_SCRIPT=/path/to/bitbucket-mcp-server/app.py
BITBUCKET_MCP_SERVER_VENV_PATH=/path/to/bitbucket-mcp-server/venv
```

### Platform Detection Patterns
- **GitHub**: github.com URLs, git@github.com:, owner/repo format (default)
- **Bitbucket**: bitbucket.org URLs, git@bitbucket.org:, workspace/repo_slug format
- **Auto-detect**: Automatic platform detection based on repository identifier

## Total Files: 87 (+5 nieuwe bestanden)
## Total Size: ~650KB (excluding dependencies, +150KB voor nieuwe functionaliteit)